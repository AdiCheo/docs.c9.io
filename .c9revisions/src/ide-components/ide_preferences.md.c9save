{"ts":1342721980156,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"Author: Garen J. Torikian\n\n## IDE Preferences\n\nThere are many different ways to configure the IDE. Below is a list of the options available, and what they do.\n\nNote: All of these options are on a per-project basis. Changing them in one project does not affect any another.\n\n<dl>\n<dt>General</dt>\n<dd>This section controls the overall IDE behavior:\n<ul>\n  <li>**Enable UI Animations**: enables or disables fluid animations for various UI elements, such as the Project Bar</li>\n  <li>**Animate Scrolling**: enables or disables fluid animations when scrolling through code (such as for goto line)</li>\n  <li>**Enable Auto-Save**: If enabled, automatically saves your files on every change</li>\n  <li>**On Save, Strip Whitespace**: when saving a file, you can remove [all extraneous whitespace from your code lines]{: #stripWhitespace}</li>\n  <li>**Reveal Active File in Project Tree**: enabling this jumps the project tree to the active file whenever a tab changes to a different file</li>\n  <li>**Warn Before Exiting**: shows a dialog asking if you _really_ want to leave Cloud9 IDE when closing your browser</li>\n  <li>**Node.js Runtime**: [defines the default runtime for your Node.js code. \"Auto\" is based on whatever is in the _package.json_ file, while \"Default\" reverts to Node 0.4.x.]{: #nodejsRuntime}</li>\n  <li>**Keybindings**: allows you to choose which operating system to use for keyboard shortcuts</li>\n</ul>\n</dd>\n<dt>Language Support</dt>\n<dd>This section controls language analysis options:\n<ul>\n   <li>**Enable Hints and Warnings Rules**: presents information about your code in the gutter</li>\n   <li>**Highlight Variable Instances**: highlights variable instances in your code</li>\n   <li>**Mark Undeclared Variables**: provides warnings if a variable is being used and has not been declared yet</li>\n   <li>**Mark Unused Function Arguments**: provides a strikethrough for arguments in a function that are not being used</li>\n   <li>**Complete As You Type**: provides an autocompletion box that is populated with code in your workspace</li>\n   <li>**Warning Level**: specifies the minimum level of information severity you want provided in the gutter</li>\n</ul>\n</dd>\n<dd>\n<dt>Code Editor</dt>\n<dd>This section controls the IDE editor while you're coding:\n<ul>\n  <li>**Auto-pair Quotes, Brackets, etc.**: [when enabled, typing \", (,  or \\[ will actually make two characters appear. In addition, whenever you highlight a word and type one of these characters, it is surrounded by that character (_e.g._ words becomes \"words\")]{: #autoPair}</li>\n  <li>**Full Line Selection**: [when highlighting lines, this option will highlight all ending whitespace, until the end of the editor window]{: #fullLineSelection}</li>\n  <li>**Highlight Active Line**: [presents a darker shade in the code editor to indicate which line you're currently on]{: #highlightActiveLine}</li>\n  <li>**Highlight Gutter Line**: presents a darker shade in the gutter which line you're currently on]{: #highlightActiveLine}</li>\n  <li>**Show Invisible Characters**: [shows invisibles characters in the editor, like tabs and line breaks]{: #invisibleChars}</li>\n  <li>**Show Gutter**: [shows the gutter in the editor, which indicates line numbers, warnings, and errors]{: #showGutter}</li>\n  <li>**Highlight Selected Word**: [if you highlight a word, this highlights all matching words in the editor]{: #highlightSelectedWord}</li>\n  <li>**Auto-hide Horizontal Scroll**: w[hen this is enabled, this will hide the horizontal scroll bar in the editor. Note that this has no effect in Mac OS X 10.7 (Lion), since all scrollbars, by default, auto-hide.]{: #autoHideHorizontalScroll}</li>\n  <li>**[Vim Mode**: when enabled, allows you to use vim keybindings in the IDE]{: #vimModeDef}</li>\n  <li>**Code Folding**: [when enabled, allows you to show or hide \"blocks\" of code]{: #codeFolding}</li>\n  <li>**Fade Fold Widgets**: when enabled, fades the folding widgets in the gutter</li>\n  <li>**Font Size**: [changes the font size of the code in the editor]{: #fontSize}</li>\n  <li>**Show Print Margin**: [shows (and defines) the number of characters possible in line, before it wraps]{: #showPrintMargin}</li>\n  <li>**Soft Tabs**: [indicates how many spaces a single tab represents]{: #softTabs}</li>\n  <li>**Mouse Scroll Speed**: [defines the speed of the mouse scrolls]{: #mouseScrollSpeed}</li>\n  <li>**Newline Mode**: specifies the newline mode for the IDE</li>\n</dd>\n<dd>\n<dt>Code Tools</dt>\n<dd>This section controls the various tools that are available in the IDE:\n<ul>\n  <li>**Enable Color Picker**: makes [the color picker](./colorpicker.html) available for use</li>\n</dd>\n<dt><a name=\"JSBeautify\"></a>JS Beautify</dt>\n<dd>These options control the behavior of the code formatting tool:  \n<ul>\n  <li>**Preserve Empty Lines**: when enabled, the editor keeps any new lines without text</li>\n  <li>**Keep Array Indention**: when enabled, tabs and newlines in arrays are preserved. For example, the follow array would remain as-is with this option:\n    <pre>\n    var o = [{\n        a: b\n    }, {\n        c: d\n    }];\n    </pre>\n  </li>\n  <li>**JSLint Strict Whitespace**: if selected, all new brackets are indented by a space; for example `if(x){` becomes `if (x) {`, and `function(arg){` becomes `function (arg) {`</li>\n   <li>**Braces**: these options control how braces are handled in the IDE:\n   <ul>\n   <li>**Braces with control statement**: braces are left \"in-line\" alongside the code statements. For example, code is formatted like this:\n    <pre>\n    if (true) {\n        var x = 3;\n    } else {\n        var x = 5;\n    }\n    </pre>\n    </li>\n   <li>**Braces on own line**: braces are always placed on their own line. For example, code is formatted like this:\n    <pre>\n    if (true)\n    {\n        var x = 3;\n    } else\n    {\n        var x = 5;\n    }\n    </pre>\n   </li>\n   <li>**End braces on own line**: only the ending braces have their own line. For example, code is formatted like this:\n    <pre>\n    if (true) {\n        var x = 3;\n    }\n    else {\n        var x = 5;\n    }\n    </pre>\n    </li>\n    </ul>\n</ul>\n</dd>\n</dl>"]],"start1":0,"start2":0,"length1":0,"length2":6115}]],"length":6115}
{"contributors":[],"silentsave":false,"ts":1342722158415,"patch":[[{"diffs":[[0,"ed, all "],[-1,"new "],[0,"brackets"]],"start1":5162,"start2":5162,"length1":20,"length2":16},{"diffs":[[0,"are "],[-1,"indent"],[1,"preced"],[0,"ed b"]],"start1":5179,"start2":5179,"length1":14,"length2":14}]],"length":6111,"saved":false}
