{"ts":1342572562721,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"Generating documentation from manifest './manifest.json'\nCreating conrefs for /Users/gjtorikian/Developer/cloud9ide-documentation/src/deploying/deploying_to_heroku.md,/Users/gjtorikian/Developer/cloud9ide-documentation/src/deploying/deploying_to_windows_azure.md,/Users/gjtorikian/Developer/cloud9ide-documentation/src/deploying/deploying_your_code.md,/Users/gjtorikian/Developer/cloud9ide-documentation/src/developer/creating_extensions.md,/Users/gjtorikian/Developer/cloud9ide-documentation/src/faq/faq.md,/Users/gjtorikian/Developer/cloud9ide-documentation/src/features/applying_themes.md,/Users/gjtorikian/Developer/cloud9ide-documentation/src/features/color_picker.md,/Users/gjtorikian/Developer/cloud9ide-documentation/src/features/file_handling.md,/Users/gjtorikian/Developer/cloud9ide-documentation/src/features/minimap.md,/Users/gjtorikian/Developer/cloud9ide-documentation/src/features/tab_functions.md,/Users/gjtorikian/Developer/cloud9ide-documentation/src/features/zen_mode.md,/Users/gjtorikian/Developer/cloud9ide-documentation/src/ide-components/console.md,/Users/gjtorikian/Developer/cloud9ide-documentation/src/ide-components/dashboard.md,/Users/gjtorikian/Developer/cloud9ide-documentation/src/ide-components/editor.md,/Users/gjtorikian/Developer/cloud9ide-documentation/src/ide-components/ide_preferences.md,/Users/gjtorikian/Developer/cloud9ide-documentation/src/ide-components/project_bar.md,/Users/gjtorikian/Developer/cloud9ide-documentation/src/ide-components/status_bar.md,/Users/gjtorikian/Developer/cloud9ide-documentation/src/ide-components/toolbar.md,/Users/gjtorikian/Developer/cloud9ide-documentation/src/tutorials/converting_public_to_private.md,/Users/gjtorikian/Developer/cloud9ide-documentation/src/tutorials/creating_new_account.md,/Users/gjtorikian/Developer/cloud9ide-documentation/src/tutorials/creating_new_workspace.md,/Users/gjtorikian/Developer/cloud9ide-documentation/src/tutorials/ftp_workspaces.md,/Users/gjtorikian/Developer/cloud9ide-documentation/src/tutorials/running_and_debugging_your_code.md,/Users/gjtorikian/Developer/cloud9ide-documentation/src/tutorials/setting_up_bitbucket_workspace.md,/Users/gjtorikian/Developer/cloud9ide-documentation/src/tutorials/setting_up_github_workspace.md,/Users/gjtorikian/Developer/cloud9ide-documentation/src/workflows/creating_coffeescript_app.md,/Users/gjtorikian/Developer/cloud9ide-documentation/src/workflows/editing_wordpress_sites.md,/Users/gjtorikian/Developer/cloud9ide-documentation/src/workflows/writing_nodejs_hello_world.md\nFinished setting up conrefs...\nCopying assets to out/assets...\nCopying resources...\n<h2>Deploying to Heroku</h2>\n<p>This article will show you how to deploy your applications to Heroku, a cloud-based application platform. The integration with Cloud9 IDE makes your development process even more agile. If you don&#39;t have a Heroku account, visit <a href=\"htttp://www.heroku.com\">their website</a> to create one for free. </p>\n<p>To get started, create a simple Node.js application. If you don&#39;t have one yet, you can <a href=\"writing_nodejs_hello_world.html\">follow our tutorial</a> on developing one. </p>\n<div class=\"alert alert-block\"><h4 class=\"alert-heading\">Warning: </h4>Before you attempt to deploy your application, make sure that you have committed all your changes to version control. Cloud9 deploys for you whatever was last committed to version control.</div>\n<p>After you click on the <strong>Deploy</strong> button in the Project Bar, click the plus sign next to Deploy to add another deploy target. Choose Heroku as an option. After you have signed into your Heroku account, you can create a new deploy target or choose an existing one from your account:</p>\n<p><img src=\"./images/herokuDeploy.png\" alt=\"Showing the Deploy button\"></p>\n<div class=\"alert alert-success\"><h4 class=\"alert-heading\">Note: </h4>Heroku only allows you to create names for your apps that contain letters and dashes.</div>\n<p>Next, press <strong>Deploy</strong> to continue the process; the following window might appear:</p>\n<p><img src=\"./images/missingPackageJSON.png\" alt=\"Dialog requesting a package JSON file\"></p>\n<p>Heroku Node.js apps <a href=\"http://devcenter.heroku.com/articles/nodejs-versions\">are required to have a package.json file</a>, much like with NPM. Cloud9 can generate a <em>package.json</em> file for you, containing metadata to share Heroku. The following lines represent what that file might looks like:</p>\n<pre><code>{\n    &quot;name&quot;: &quot;cloud9-heroku-example&quot;,\n    &quot;version&quot;: &quot;0.0.1&quot;\n}</code></pre>\n<p>After you have a <em>package.json</em> file, you might see this dialog:</p>\n<p><img src=\"./images/missingProcFile.png\" alt=\"Dialog requesting a Procfile\"></p>\n<p><a href=\"http://devcenter.heroku.com/articles/node-js#declare_process_types_with_foremanprocfile\">Sometimes, a Heroku app also requires a Procfile</a>. The Procfile is needed to start the application in Heroku. You can just create a new file, add the line below, and save it as &#39;Procfile&#39;. Don&#39;t add any file extensions.</p>\n<pre><code>web: node web.js</code></pre>\n<p>Try the deploy button again. The console will directly output the following when the deployment is completed:</p>\n<p><img src=\"./images/herokuConsoleOutput.png\" alt=\"Console output for Heroku\"></p>\n<p>And just like that, you&#39;ve deployed your project to Heroku.</p>\n\n<h2>Deploying to Windows Azure</h2>\n<p>This article will show you how to deploy your applications to Windows Azure. If you don&#39;t have an account yet, the Windows Azure process will help you create one. Keep in mind that Windows Azure is not free, though it does come with a free trial. Windows Azure projects can be deployed from any operating system.</p>\n<p>To get started, create a simple Node.js application. If you don&#39;t have one yet, you can <a href=\"writing_nodejs_hello_world.html\">follow our tutorial</a> on developing one. </p>\n<div class=\"alert alert-block\"><h4 class=\"alert-heading\">Warning: </h4>Before you attempt to deploy your application, make sure that you have committed all your changes to version control. Cloud9 deploys for you whatever was last committed to version control.</div>\n<p>After you click on the <strong>Deploy</strong> button in the Project Bar, click the plus sign next to Deploy to add another deploy target. Choose Windows Azure as an option. You&#39;ll be prompted with this dialog:<br><img src=\"./images/windowsAzureDialog.png\" alt=\"Windows Azure asking for publisher settings\"></p>\n<p>You must click on the <strong>Download Windows Azure Settings</strong> button before you can continue. If you don&#39;t have a Windows Azure account, here is where you can create one. If you <em>do</em> have an account, your browser will automatically download the required file.</p>\n<p>When that&#39;s finished, simply select the downloaded file from your computer, and upload it to Cloud9. You&#39;ll only have to do this process once. If you ever need to upload a new certificate, be sure to click <strong>Clear cert</strong> in the lower-right corner of this dialog.</p>\n<p>After the file has uploaded, click on <strong>Create new</strong> to create a new hosted service. A hosted service is the container in which your application is hosted when it is deployed to Windows Azure. For more information, see <a href=\"http://msdn.microsoft.com/en-us/library/windowsazure/gg432976.aspx\">Overview of Creating a Hosted Service for Windows Azure</a>. </p>\n<p>You can set a few configuration options such as the number of instances to use, its host OS, and where the data center is located. Selecting &quot;Enable RDP&quot; and providing a username and password enables remote desktop for your deployment.</p>\n<p>Your new Windows Azure server will appear in the Deploy list:<br><img src=\"./images/windowsAzureInfo.png\" alt=\"Windows Azure information\"></p>\n<p>Go ahead and click on <strong>DEPLOY</strong>. If this is the first time you&#39;re trying to deploy this project to Windows Azure, you&#39;ll receive three prompts:</p>\n<ol>\n<li><p>A dialog will inform you of a missing web.config file. If you click <strong>Yes</strong>, Cloud9 will create a file called <em>Web.cloud.config</em> in your project. This file contains <a href=\"http://en.wikipedia.org/wiki/Web.config\">configuration information</a> about your app.</p>\n</li>\n<li><p>You&#39;ll be told about a missing csdef file. If you click <strong>Yes</strong>, Cloud9 will create a file called <em>ServiceDefinition.csdef</em> in your project. ServiceDefinition.csdef is a Windows Azure-specific files necessary for publishing your application For more information, see <a href=\"http://msdn.microsoft.com/en-us/library/windowsazure/gg432976.aspx\">Overview of Creating a Hosted Service for Windows Azure</a>.</p>\n</li>\n<li><p>You&#39;ll be asked to select the instance size for this application. For this tutorial, just select Small, and then click <strong>Create</strong>. For more details about Windows Azure VM sizes, see <a href=\"http://msdn.microsoft.com/en-us/library/windowsazure/ee814754.aspx\">How to Configure Virtual Machine Sizes</a>.</p>\n</li>\n</ol>\n<p>Your app will now deploy to a Windows Azure server! You can follow its progress in the Deploy panel, or by watching the messages in the console:\n<img src=\"./images/windowsAzureStagingOutput.png\" alt=\"Windows Azure staging messages\"></p>\n<p>For more information on configuring your app on the Windows Azure website, see <a href=\"http://www.windowsazure.com/en-us/develop/nodejs/tutorials/deploying-with-cloud9/\">Deploying a Windows Azure App from Cloud9</a>.</p>\n\n<h2>Deploying Your Code</h2>\n<p>Cloud9 IDE offers many different ways to get your code from your editor to your production server. To deploy your code, click on the <strong>Deploy</strong> button in the Project Bar:</p>\n<p><img src=\"./images/deployButton.png\" alt=\"The Deploy button in the Project Bar\"></p>\n<p>We offer tight integration with the following environments:</p>\n<ul>\n<li><a href=\"deploying_to_heroku.html\">Heroku</a></li>\n<li><a href=\"deploying_to_windows_azure.html\">Windows Azure Sites</a></li>\n</ul>\n<p>Following any of those links will provide you with more information on code deployment. You can deploy your code to as many services and servers as you like. Keep in mind that you&#39;ll already need an account at those hosting providers before you can deploy your app to them!</p>\n\n<h2>Creating Extensions</h2>\n<p>In addition to being an open-source project, Cloud9 IDE provides support for users to create their own plugins. Plugins can be used to add additional functionalty to the Cloud9IDE, without necessarily understanding all of its </p>\n\n<h2>FAQ</h2>\n<p>What is Cloud9 IDE?\n:   Cloud9 IDE is, at its core, an online code editor. Specifically, it&#39;s an IDE for Javascript that uses Node.js as a backend. Cloud9 IDE supports the ability to import projects from GitHub, Bitbucket, and FTP, collaborative development, and syntax highlight for a variety of languages. It&#39;s simple, fast, and extremely powerful, with tabbed file browsing, autocompletion of methods and properties, searching across project files, and many other features you&#39;d expect from a terrific editor.\n:   Since Cloud9 IDE runs on Javascript, you can build, debug, and run Node.js applications within your browser. You can run npm and import packages developed by the Node.js community. Cloud9 IDE can also instantaneously deploy your projects to production servers hosted by Heroku and Nodester in order to take your awesome ideas to a wider audience.\n:   Cloud9 IDE is completely free to use for open source projects. If you want to develop under a private (and collaborative) environment, you can pay a low monthly fee.</p>\n<p>How Can I Delete My Account?\n: If you don&#39;t want to use Cloud9 IDE any longer or just want to remove an account, you can find the &#39;delete your account&#39; option under your account settings within the dashboard:  </p>\n<ol>\n<li>Go to &#39;My Account&#39;  </li>\n<li>Click &#39;Delete your Account&#39; from within your account settings  </li>\n<li>Please give us feedback. Any information to improve the product is usefull.</li>\n</ol>\n<p>FTP Projects Don&#39;t Work. Am I Doing Something Wrong?\n: First of all, make sure you read the article about <a href=\"ftp_workspaces.html\">setting up an FTP project</a>.\n: Next, be aware that we only support passive FTP, not SFTP or FTPS.\n: Also, please make sure you succeed the login test when creating a project. If you didn&#39;t try it when creating the project, just click <strong>FTP Settings</strong> (next to <strong>Start Editing</strong>) in the dashboard. In the pop-up window, you can do the login test again.\n: Another possible problem is a wrong &quot;Initial Path&quot;. Did you set the &quot;Initial Path&quot; in the FTP project? If so, it&#39;s possible that unseting it migt help. Some users seem to be having problems with it when the path they put doesn&#39;t exist or is a relative path. This is not a bug, but a misunderstanding of absolute versus relative paths. If you put a relative path (that is, if the initial path does not start with a <code>/</code>), then Cloud9 assumes that you want to start from the folder your FTP server leaves you after login (home or default folder). If you put an initial path that leaves you in a location where you don&#39;t have write privileges, that could cause problems too.</p>\n<p>My Username Was Duplicated; How Could This Happen?\n: You have just signed up for a Cloud9 IDE account and now you have two usernames: <code>username</code> and <code>username_1</code>. This happens in the following use case:  </p>\n<ol>\n<li>You signed up for Cloud9 IDE following the registration form on our homepage. This created an account with your username.</li>\n<li>You <em>then</em> signed up for Cloud9 IDE using your GitHub account by clicking on the GitHub icon on the home page. This created an second account, but because your username (from GitHub) is already in use, we adjusted it to add a prefix. </li>\n</ol>\n<p>: To link your first account with your original username to your GitHub account, you should remove the second account. You can do so by logging in to Cloud9 IDE using the GitHub (click on the GitHub icon in the log in screen).\n: Next, find <strong>Delete your account</strong> under your account settings within the dashboard and delete the <code>username_1</code> account.\n: Finally, log in to your original account using your username (or email address) and password and you can <a href=\"setting_up_github_workspace.html\">link to GitHub</a>.</p>\n<p>Why Don&#39;t Console Commands Don&#39;t Work?\n: Before submitting a support request about the console not working, please consider this:  </p>\n<ol>\n<li>Are you behing a proxy or firewall? It&#39;s possible that it might be blocking our xhr polling. If you can use Cloud9 IDE at home, but can&#39;t get it to work properly while at the office, this might be the cause.</li>\n<li>Are you running an anti-virus? The anti-virus software might be blocking some requests. Lately, we have experienced this issue with Avast anti-virus. For some users, disabling this software was enough to get Cloud9 IDE to work properly again. For others, uninstalling Avast was necessary. We are working on finding a solution for this.</li>\n</ol>\n<p>: If neither of these applies to you, please file a support request and we will look more deeply into your problem.</p>\n<p>When I try to Use GitHub Access, a Message Says: &quot;Another account is already linked to Github account &#39;username&#39;&quot;\n: You&#39;ve created multiple accounts. See above to see how to solve this issue.</p>\n<p>How can I deploy Mercurial projects to Heroku?\n: You can use the command line to initialize git and use it to deploy your project to Heroku like this:</p>\n<pre><code>git init \ngit add . \ngit commit -m &quot;message&quot; \ngit remote add heroku git_heroku_address_of_repo\ngit push heroku master</code></pre>\n<p>: <code>git_heroku_address_of_repo</code> is the git link, which you can find on the Heroku page. After enterting these, your project will be deployed to Heroku.</p>\n<p>Why can&#39;t I run code that spawns a child process?\n:  Cloud9 blocks the creation of child processes for security reasons, since you are running your code in a shared environment. In the future, we will offer private run environments in which you will be able to create child processes.</p>\n\n<h2>Applying Themes and Syntax Highlighting</h2>\n<p>The Cloud9 IDE supports over two dozen different themese for highlighting your code. You can change your current theme by going to <strong>View | Themes</strong>, and selecting one of the many options. Note that by hovering over the menu items, you&#39;ll be able to get a preview of the theme. To activate a theme you like, just click on its name.</p>\n<p>Themes for Cloud9 IDE have full compatibility with those found in other editors, such as Textmate or Sublime Text. For information on activating additional themes, see <a href=\"https://github.com/ajaxorg/ace\">the GitHub repo for the Ace editor</a>.</p>\n<p>For reference, the IDE supports themes for the following languages:</p>\n<div style=\"-moz-column-count: 2; -moz-column-gap: 20px; -webkit-column-count: 2; -webkit-column-gap: 20px; column-count: 2; column-gap: 20px;\">\n<ul>\n    <li>C#</li>\n    <li>C/C++</li>\n    <li>Clojure</li>\n    <li>Coffescript</li>\n    <li>Coldfusion</li>\n    <li>CSS</li>\n    <li>Groovy</li>\n    <li>Java</li>\n    <li>Javascript</li>\n    <li>Latex</li>\n    <li>Lua</li>\n    <li>Markdown</li>\n    <li>OCaml</li>\n    <li>PHP</li>\n    <li>Perl</li>\n    <li>Powershell</li>\n    <li>Python</li>\n    <li>Ruby</li>\n    <li>Scala</li>\n    <li>SCSS</li>\n    <li>SQL</li>\n    <li>Textile</li>\n    <li>X(HTML)</li>\n    <li>XML</li>\n</ul>\n</div>\n<h2>Color Picker</h2>\n<iframe width=\"480\" height=\"360\" src=\"http://www.youtube.com/embed/T0FAFF6fQi4\" frameborder=\"0\" allowfullscreen></iframe>\n\n<p>The color picker is an awesome feature in Cloud9 IDE, designed to not only make color selections easier, but also, more harmonious. At its heart, the color picker is a way to represent words (<code>red</code>, <code>blue</code>), RGBA values (<code>rgba(175, 3, 124, .6)</code>), or hex values (<code>#f00f00</code>) into actual colors. </p>\n<p>You can use the color picker in CSS, SVG, HTML, or APF Skin files. All you have to do is hover over the value of a color definition; it&#39;ll instantly highlight: <img src=\"./images/colorPickerHighlight.png\" alt=\"Color picker highlight\"></p>\n<p>Next, click on the highlighted color. You&#39;ll get a color square defining all possible arrangements. You can click in the square, pick your own RGB or HSB values, or enter some hex code. Best of all, at the bottom of the wheel, you&#39;ll find a list of other colors within the same document--just in case you want to achieve matching shades:\n<img src=\"./images/colorPickerWheel.png\" alt=\"Color picker wheel\"></p>\n<p>That&#39;s it! To set the value, just click outside of the color picker.</p>\n\n<h2>File Handling</h2>\n<p>Cloud9 IDE provides a unique combination of file handling features, combining the best of browser-based management with typical desktop file navigation.</p>\n<h3>The File Menu</h3>\n<p>Let&#39;s take a look at the file menu on the Menu Bar:</p>\n<p><img src=\"./images/file_menu.png\" alt=\"A summary of the File menu\"></p>\n<p>Here&#39;s what they mean:</p>\n<ul>\n<li><strong>Revert to Saved</strong> lets you to revert the current file to its last saved version. This is only possible if you have a changed file you haven&#39;t saved yet.</li>\n<li><ul>\n<li>Save the file you are currently working on (<strong>Save</strong>)</li>\n<li>Save your current file with a different name and/or in a different location (<strong>Save As...</strong>)</li>\n<li>Save all your open files (<strong>Save All</strong>)</li>\n</ul>\n</li>\n<li><strong>Open</strong> lets you open a file in your project. You can achieve the same effect by double-click on a file&#39;s name in the Project Files tree.</li>\n<li><strong>Open Recent</strong> lets you reopen you recently closed files from a menu.</li>\n<li><strong>New</strong> (including <strong>New File</strong>, <strong>New from Template</strong>, and <strong>New Folder</strong>) offer their expected functionality. <strong>New from Template</strong> presents you with a menu with several options of file template to choose from.</li>\n</ul>\n<p>You can see Cloud9 IDE&#39;s file handling functionality in action in the following video:</p>\n<iframe width=\"640\" height=\"360\" src=\"http://www.youtube.com/embed/cjmiVU9d6Ng\" frameborder=\"0\" allowfullscreen></iframe>\n<h2>The Minimap</h2>\n<p>The minimap is an easy visualization of your code. It presents a smaller version of your code within the editor:\n<img src=\"./minimap.png\" alt=\"The Minimap\"></p>\n<p>You can jump through your code by clicking directly onto the minimap. To enable it, go to <strong>View | Show Minimap</strong>. This feature works best on really large code files, so try it out on your next massive project!</p>\n\n<h2>Tab Functions</h2>\n<p>Cloud9 IDE offers advanced tab features to make working with multiple files easy. These feature include:</p>\n<p><img src=\"./images/tab_menu.png\" alt=\"A summary of the tab context menu\"></p>\n<ul>\n<li>Reveal in File Tree: opens the current file in the Project Files tree</li>\n<li>Close Tab: closes the current tab</li>\n<li>Close All Tabs: closes all the opened files</li>\n<li>Close All But Current Tab: closes all the opened files, except the current one</li>\n<li></li>\n</ul>\n<p>There are also a number of keyboard shortcuts you can perform, including:   </p>\n<ul>\n<li>Adding a new tab with the <code>Alt+Shift+n</code> keyboard shortcut</li>\n<li>Cycling through your tabs by holding the <code>Alt</code> key and pressing <code>Tab</code> multiple times.</li>\n<li>Jumping directly to a tab by holding <code>Command</code> (or <code>Ctrl</code> on Windows). followed by the number of the tab&#39;s position (<em>e.g.</em> <code>Command 2</code> takes you to the second tab; <code>Command 0</code> takes you to the tenth)</li>\n</ul>\n<h3>Tab Sessions</h3>\n<p>Tab sessions is a unique feature that is useful when dealing with projects that involve juggling between many tabs. Here&#39;s a video highlighting its use:</p>\n<iframe width=\"480\" height=\"360\" src=\"http://www.youtube.com/embed/agUno6WDkAM\" frameborder=\"0\" allowfullscreen></iframe>\n\n<p>Essentially, tab sessions lets you save the current state of the tabs. You can close your workspace, switch to a different branch, and instantly reload your previously opened files. You&#39;ll no longer need to work with opening and closing multiple files.</p>\n<p>To use tab sessions, select <strong>Save Tab Sessions</strong> from the tab menu. Give it a unique name. When you&#39;re ready to restore your tab sessions, just select <strong>Load Tab Sessions</strong>. </p>\n<p>If you find that you&#39;ve got too many tab sessions defined, you can always choose to delete them from the same tab menu.</p>\n\n<h2>Activating Zen Mode</h2>\n<p>Zen mode is a full screen coding environment designed to make you more productive. It essentially removes all the additional UI elements in Cloud9 IDE, and places you in a harmonious relationship with your code. Groovy.</p>\n<p>Here&#39;s a video demonstrating the feature:</p>\n<iframe width=\"480\" height=\"360\" src=\"http://www.youtube.com/embed/lgNW5rEGOmI\" frameborder=\"0\" allowfullscreen></iframe>\n\n<p>To activate zen mode, simply hover over the upper right corner of the code editor, and click the icon that appears. Keep in mind that you&#39;ll need to have a file open before you can launch zen mode. You can resize your window by holding and dragging the left or right border.</p>\n<p>To get out of zen mode, hover over the same corner and click the same icon.</p>\n\n<h2>The Console</h2>\n<p>The console is at the bottom of the IDE. It&#39;s where you can enter command line input, view output from your program, and manipulate your projects between your code repositories. </p>\n<h3>Available Commands</h3>\n<p>You can use most Unix commands, such as <code>ls</code> and <code>mkdir</code>, in the console space. To preview the full list of basic commands in the console, you can type <code>help</code> and press Enter. For every command, a description is provided:</p>\n<p><img src=\"./images/availableCommands.png\" alt=\"Screenshot of the available commands\"></p>\n<p>You can also use mercurial commands (<code>hg</code>) and git commands (<code>git</code>) to communicate with the system, and to push your code between repositories. Typing <code>hg</code> or <code>git</code> shows the complete list of commands that are available for these services. For more information about these commands, please check their respective documentation:</p>\n<ul>\n<li><a href=\"http://mercurial.selenic.com/guide\">Mercurial Command List</a></li>\n<li><a href=\"http://help.github.com/git-cheat-sheets\">Git Command List</a></li>\n</ul>\n<p>To use mercurial commands on the project you are working on, you must have a mercurial project set up; the same holds true for git. Follow these links to learn more about how to set up these project in Cloud9:</p>\n<ul>\n<li><a href=\"./setting_up_bitbucket_workspace.html\">Setting up a Mercurial Project</a></li>\n<li><a href=\"./setting_up_github_workspace.html\">Setting up a Git project (on GitHub)</a></li>\n</ul>\n<p>These articles also explain how to use the command-line to commit your work.</p>\n<p>In addition, the console also has shortcuts for much of Cloud9 IDE&#39;s functionality. For example, <code>gotofile</code> launches the filename you provide, while <code>revealtab</code> opens the current file in the project tree. Again, typing <code>help</code> shows you which commands are available.</p>\n<h3>Output</h3>\n<p>The output tab in the console shows information whenever a user is running or debugging a program. The content is similar to the output of a desktop terminal, except it&#39;s in the same window as your editor. No need to juggle between windows anymore!</p>\n<p><img src=\"./images/consoleOutput.png\" alt=\"Screenshot of program output\"></p>\n<p>The output tab also displays the error and additional information that can improve your coding quality. You can use the console to output results from your running application, just like a regular terminal.</p>\n<h3>Search</h3>\n<p>The console also displays information about files containing search terms:</p>\n<p><img src=\"./images/searchResults.png\" alt=\"Screenshot of search results\"></p>\n<p>You can expand each result to see the line number of where a match was found. Clicking on a match opens the file in the IDE.</p>\n\n<h2>The Dashboard</h2>\n<p>From the dashboard, you can edit your profile and manage workspaces you have access to.</p>\n<p><img src=\"./images/theDashboard.png\" alt=\"An overview of the dashboard\"></p>\n<p>After you have logged into Cloud9, you are directed to the dashboard of your account. The dashboard consists of two contexts: user context and organization context.</p>\n<h3>User Context</h3>\n<p>In the top-left corner of the dashboard, your username is displayed. Within the user context, you can view your user profile by clicking on <strong>Your Account</strong>:</p>\n<p><img src=\"./images/userContext.png\" alt=\"A snippet of the user context\"></p>\n<p>The user profile contains:</p>\n<ul>\n<li>Your recent activities, including a list of actions you have recently performed, such as cloning, opening, and deleting projects</li>\n<li>Your add-on services, which you&#39;ve integrated into Cloud9. Currently, these are <a href=\"http://www.github.com\">GitHub</a> and <a href=\"http://www.bitbucket.org\">Bitbucket</a>.</li>\n<li>Your account settings, where you&#39;re given the following choices:<ul>\n<li>Change your password</li>\n<li>Change your email</li>\n<li>Show your SSH key</li>\n<li>Upgrade to premium (or, downgrade from it)</li>\n<li>Enter a promotion code</li>\n<li>Delete your account</li>\n</ul>\n</li>\n</ul>\n<p>The gravatar that is used for your profile is handled by [gravatar.com](<a href=\"http://www.gravatar.com\">http://www.gravatar.com</a>. If you don&#39;t have a gravatar yet, Cloud9 IDE uses its default.</p>\n<p>Under &#39;Your Account&#39; in the left panel, there is a tab called <strong>PROJECTS</strong>. This contains all the projects you added to Cloud9 IDE. The list is sorted by groups depending on your account settings. The groups are:  </p>\n<ul>\n<li>My Projects</li>\n<li>Shared Projects</li>\n<li>Organization Projects</li>\n<li>Projects on GitHub (public and private)</li>\n<li>Projects on Bitbucket (public and private)</li>\n</ul>\n<p>Clicking on the <img src=\"./icons/workspacePlusIcon.png\" alt=\"Project Add Icon\"> next to <strong>MY PROJECTS</strong> lets you to:</p>\n<ul>\n<li>Create a new project</li>\n<li>Clone from URL</li>\n</ul>\n<p><img src=\"./images/newWorkspace.png\" alt=\"Creating new projects\"></p>\n<p>For more information on creating new projects, see <a href=\"./creating_new_workspace.html\">this article</a>.</p>\n\n<h2>The Editor</h2>\n<p>Cloud9 IDE can be thought of as being divided in the following components:</p>\n<p><img src=\"./images/editorNaming.png\" alt=\"IDE Components\"></p>\n<p>Throughout the documentation, we&#39;ll refer to these sections by name. We can identify six distinct areas in the editor:</p>\n<ul>\n<li>The top menu bar is the uppermost area, with easy access to a variety of menus</li>\n<li>The project bar on the left lets you manipulate various aspects of your project, including its active files, preferences, and choices for deployment</li>\n<li>The panel displays views according to what&#39;s been selected in the project bar</li>\n<li>The toolbar is on the far right, where you can find tools to check the call stack, monitor variables, and breakpoints. This is only activated when <a href=\"./running_and_debugging_your_code.html\">debugging your code</a>.</li>\n<li>The code editor is the main area where you write your code.</li>\n<li>The console is the bottom area of the window. It&#39;s an expandable area that can act like a desktop terminal to enter command line input (like <code>ls</code> or <code>mkdir</code>). It also displays output provided by your program&#39;s print statements (like <code>console.log()</code>), as well as providing an area for search results</li>\n</ul>\n<p>The <a href=\"./project_bar.html\">Project Bar</a>, <a href=\"./toolbar.html\">Tool Bar</a>, and <a href=\"./console.html\">Console</a> are powerful features, so their documentation is provided separately. We&#39;ll talk about the rest of the editor below:</p>\n<h3>The Top Menu Bar</h3>\n<p><img src=\"./images/topMenuBar.png\" alt=\"A screenshot of the top menu bar\"></p>\n<p>In this section, you can find the usual menus for creating and saving files, changing your view, <a href=\"./applying_themes.html\">applying a new theme for the editor</a>, and switching between windows.</p>\n<p>In the middle of the menu bar you&#39;ll find the <strong>debug</strong> button: <img src=\"./icons/debugButton.png\" alt=\"The debug button\">. For more information, see <a href=\"./running_and_debugging_your_code.html\">the section on &quot;Running and Debugging Your Code&quot;.</a>.</p>\n<p><a id=\"previewButton\"></a></p>\n<p>The preview button <img src=\"./icons/previewButton.png\" alt=\"The preview button\"> provides you with a look at what the currently active file would look like in the browser. For HTML files, it actual renders the markup into a real page. For mose other files, it provides plaintext view of the source code.</p>\n<p>On the far right of the menu, near the Cloud9 IDE logo, there are two more icons: one to return to <a href=\"./dashboard.html\">the dashboard</a>, and one to return to the Cloud9 IDE homepage.</p>\n<h3>The Code Editor</h3>\n<p>This is where most of the action happens. Every file you open appears here as a tab. You can open a new file easily by clicking on the <img src=\"./icons/tabPlusIcon.png\" alt=\"Tab add icon\"> button to the right of the last tab. Cloud9 IDE offers syntax highlighting and basic code completion for most popular programming languages.</p>\n<p>The code editor supports a large number of keyboard shortcuts to increase your productivity. For an up-to-date list of these within the IDE, simply go to <strong>Help | Keyboard Shortcuts</strong>.</p>\n<p>If you hover over to the upper-right corner, you can <a href=\"./zen_mode.html\">activate zen-mode</a>, which is a full screen coding environment. </p>\n<p>At the lower-right corner, you can find <a href=\"./status_bar.html\">the status bar</a>.</p>\n\n<h2>IDE Preferences</h2>\n<p>There are many different ways to configure the IDE. Below is a list of these options:</p>\n<div class=\"alert alert-success\"><h4 class=\"alert-heading\">Note: </h4>All of these options are on a per-project basis. Changing them in one project does not affect any another.</div>\n<p>General\n: This section controls the overall IDE behavior:</p>\n<ul>\n<li>Runtime: defines the default runtime for your Node.js code. &quot;Auto&quot; is based on whatever is in the <em>package.json</em> file, while &quot;Default&quot; reverts to Node 0.4.x.</li>\n<li>Warn before exiting: Provides a dialog asking if you <em>really</em> want to leave when closing your browser running Cloud9 IDE </li>\n<li>On Save, Strip Whitespace: when saving a file, you can remove all extraneous whitespace from your code lines</li>\n<li></li>\n</ul>\n<p>Code Editor\n: This section controls the IDE editor while you&#39;re coding:</p>\n<ul>\n<li>Vim mode: when enabled, allows you to use vi keybindings</li>\n<li>Auto-pair Quotes, Brackets, etc.: when enabled, typing &quot;, (,  or [ will actually make two characters appear. In addition, whenever you highlight a word and type one of these characters, it is surrounded by that character (<em>e.g.</em> words becomes &quot;words&quot;)</li>\n<li>Code Folding: when enabled, allows you to show or hide &quot;blocks&quot; of code</li>\n<li>Full Line Selection: when highlighting lines, this option will highlight all ending whitespace, until the end of the editor window</li>\n<li>Highlight Active Line: presents a darker background to indicate which line you&#39;re currently on</li>\n<li>Show Invisible Characters: shows invisibles characters in the editor, like spaces, tabs, and line breaks</li>\n<li>Show Gutter: shows the gutter in the editor, which indicates line numbers, warnings, and errors</li>\n<li>Highlight Selected Word: when this is enabled, and if you highlight a word, this highlights all matching words in the editor</li>\n<li>Auto-hide Horizontal Scroll: when this is enabled, this will hide the horizontal scroll bar in the editor. Note that this has no effect in Mac OS X 10.7 (Lion), since all scrollbars, by default, auto-hide.</li>\n<li>Font Size: changes the font size of the code in the editor</li>\n<li>Show Print Margin: shows (and defines) the number of characters possible in line, before it wraps</li>\n<li>Soft Tabs: indicates how many spaces a single tab represents</li>\n<li></li>\n</ul>\n<p><a name=\"JSBeautify\"></a></p>\n<p>JS Beautify\n: These options control the behavior of the code formatting tool found in <a href=\"./status_bar.html\">the status bar</a>.  </p>\n<ul>\n<li>Preserve empty lines: if enabled, the editor keeps any new lines without text</li>\n<li><p>  var o = [{</p>\n<pre><code>  a: b</code></pre>\n<p>  }, {</p>\n<pre><code>  c: d</code></pre>\n<p>  }];</p>\n</li>\n<li><p>JSLint Strict Whitespace: if selected, all new scopes lines are indented by four spaces</p>\n</li>\n<li><p>  if (true) {</p>\n<pre><code>  var x = 3;</code></pre>\n<p>  } else {</p>\n<pre><code>  var x = 5;</code></pre>\n<p>  }</p>\n<ul>\n<li><p>if (true)\n{</p>\n<pre><code>var x = 3;</code></pre>\n<p>} else\n{</p>\n<pre><code>var x = 5;</code></pre>\n<p>}</p>\n</li>\n<li><p>if (true) {</p>\n<pre><code>var x = 3;</code></pre>\n<p>}\nelse {</p>\n<pre><code>var x = 5;</code></pre>\n<p>}</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>Language Support\n: This section controls language analysis options:</p>\n<ul>\n<li>Enable JSHint Rules: enables a layer of <a href=\"http://www.jshint.com/\">JSHint warnings</a> for your Javascript code</li>\n<li>Highlight Instance Variables: highlights instance variables in your code</li>\n<li>Mark Undeclared Variables: provides warnings if a variable has not been declared yet</li>\n<li></li>\n</ul>\n\n<h2>The Project Bar</h2>\n<p>The project bar is the leftmost content area in the Cloud9 IDE. It controls the behavior of your IDE, as well as the presentation of your code to help you design in the style you like:</p>\n<p><img src=\"./images/project_bar.png\" alt=\"The Project Bar\"></p>\n<p>The project bar has several buttons. From top to bottom, they are: <strong>Project Files</strong>, <strong>Active Files</strong>, <strong>Preferences</strong>, and <strong>Deploy</strong>. Pressing any of these buttons activates a different view in the panel to the right of the buttons. In more detail:</p>\n<ul>\n<li><strong>Project Files</strong>: shows your project&#39;s directory structure, which appears in the panel to the right. You can view all your files here. Right-click in this area to reveal a drop-down menu to create new files, copy/paste within your project, and other options.</li>\n<li><strong>Active Files</strong>: shows your files that are currently open.</li>\n<li><strong>Run</strong>: lets you run and debug your code live, in the browser. For more information, see <a href=\"./running_and_debugging_your_code.html\">the section on &quot;Running and Debugging Your Code&quot;.</a>.</li>\n<li><strong>Deploy</strong>: allows you to deploy to a Heroku, Joyent, or Windows Azure production server. For more information, see <a href=\"./deploying_your_code.html\">the section on &quot;Deploying Your Code&quot;.</a>.</li>\n<li></li>\n</ul>\n<p>Clicking on any button expands its menu. Clicking on an expanded menu causes it to collapse, which gives you a little more space to work with.</p>\n\n<h2>Status Bar</h2>\n<p>The status bar is designed to provide you with all sorts of information about your code--and additional functionality--without getting in the way of the IDE. It&#39;s quite tiny, and quite powerful, like a weight-lifting squirrel.</p>\n<p>You can find the status bar in the lower-right corner of the editor: <img src=\"./icons/statusBarCollapsed.png\" alt=\"The status bar in its natural, shortened state\">. Keep in mind that the status bar is transparent, so it&#39;s able to camoflauge well with light or dark themes.</p>\n<p>There&#39;s three pieces of crucial information available at all times: your current row, your current column, and, if you&#39;re highlighting characters, the status bar displays the number of bytes currently selected.</p>\n<p>If you click on the status bar, it expands into a menu with additional options: <img src=\"./icons/statusBarExpanded.png\" alt=\"The status bar, expanded\">.</p>\n<p>The first menu controls various ways of coding within the IDE. These are:</p>\n<ul>\n<li>Vim mode: when enabled, allows you to use vi keybindings</li>\n<li>Beautify Selection: reformats the highlighted code to the rules you&#39;ve chosen from <a href=\"./ide_preferences.html#JSBeautify\">the JSBeautify section of the IDE preferences</a></li>\n<li>Strip Whitespace: removes all extraneous whitespace from your code lines</li>\n<li></li>\n</ul>\n<p>The second menu specifies several visual formatting rules for the IDE. These are:</p>\n<ul>\n<li>Show Invisibles: shows invisibles characters in the editor, like spaces, tabs, and line breaks</li>\n<li>Wraps Lines: wraps lines according to the line margin define. Otherwise, lines run on horizontally</li>\n<li>Code Folding: when enabled, allows you to show or hide &quot;blocks&quot; of code</li>\n<li>Full Line Selection: when highlighting lines, this option will highlight all ending whitespace, until the end of the editor window</li>\n<li>Highlight Active Line: presents a darker background to indicate which line you&#39;re currently on</li>\n<li>Show Gutter: shows the gutter in the editor, which indicates line numbers, warnings, and errors</li>\n<li>Highlight Selected Word: when this is enabled, and if you highlight a word, this highlights all matching words in the editor</li>\n<li>Auto-pair Quotes, Brackets, etc.: when enabled, typing &quot;, (,  or [ will actually make two characters appear. In addition, whenever you highlight a word and type one of these characters, it is surrounded by that character (<em>e.g.</em> words becomes &quot;words&quot;)</li>\n<li>Auto-hide Horizontal Scrollbar: hen this is enabled, this will hide the horizontal scroll bar in the editor. Note that this has no effect in Mac OS X 10.7 (Lion), since all scrollbars, by default, auto-hide.</li>\n<li>Font Size: changes the font size of the code in the editor</li>\n<li>Show Print Margin: shows (and defines) the number of characters possible in line, before it wraps</li>\n<li>Soft Tabs: indicates how many spaces a single tab represents</li>\n<li></li>\n</ul>\n<p>You&#39;ll notice that some of these options already exist in <a href=\"./ide_preferences.html\">the IDE preferences panel</a>.</p>\n\n<h2>The Toolbar</h2>\n<p>The toolbar, located on the far right of the editor, is only visible when <a href=\"./running_and_debugging_your_code.html\">debugging your code</a>:</p>\n<p><img src=\"./images/tool_bar.png\" alt=\"The toolbar used for debugging\"></p>\n<p>Here&#39;s what these icons mean:</p>\n<ul>\n<li><img src=\"./icons/debug_navigation.png\" alt=\"Debugging navigation tools\"></li>\n<li><img src=\"./images/callStack.png\" alt=\"Callstack menu window\"></li>\n<li><img src=\"./images/interactiveMenu.png\" alt=\"Interactive mode window\"></li>\n<li><img src=\"./images/variablesMenu.png\" alt=\"Variable inspection window\">  </li>\n<li><img src=\"./images/breakpointsMenu.png\" alt=\"Breakpoint list window\"></li>\n</ul>\n\n<h2>Converting your Public Projects into Private Projects</h2>\n<p>One of the premium features offered by Cloud9 IDE is the ability to create private projects. You might decide later on to turn an existing public project into a private one. At the moment, we don&#39;t have an easy way to turn public Cloud9 projects into private projects.</p>\n<p>You can get around this limitation by using a code-hosting site like GitHub or Bitbucket to push and pull your Cloud9 projects. You can do so by following these steps:</p>\n<ol>\n<li>Create an account in a code-hosting site that supports private repositories (Bitbucket offers free private repos, so that might be your best option.)</li>\n<li>Link the account at the code-hosting site with your Cloud9 account (see <strong>Add-on Services</strong> under <strong>Your Account</strong> in the Dashboard)</li>\n<li>Push the public Cloud9 project you want to convert to private to the code-hosting site.</li>\n<li>Go to the Cloud9 Dashboard and select &quot;clone from url&quot; with the URL from the new private repository at the code-hosting site; select &quot;Only the people I specify (premium feature)&quot;. This creates a new private project from the repository you provide in the url.</li>\n<li>Delete the old public project in Cloud9.</li>\n</ol>\n<p>If you&#39;re not sure how to link your projects to Bitbucket, <a href=\"setting_up_bitbucket_workspace.html\">this article on &quot;Setting Up a Git Project (on BitBucket)&quot; might be useful</a>.</p>\n\n<h2>Creating a New Account</h2>\n<p>Creating an account for the Cloud9 IDE can be done in a few simple steps:</p>\n<p>First, sign up for an account on <a href=\"http://c9.io/site/pricing\">the Cloud9 homepage</a>, by filling in your desired username and email address, then pressing the <strong>Sign Up</strong> button: </p>\n<p><img src=\"./images/signUp.png\" alt=\"Sign-up Box\"></p>\n<p>You&#39;ll see a message indicating that we sent you an email to the address you provided with activation instructions.</p>\n<p>Now, check your email. There will be a link you can follow to activate your account. Back at Cloud9 IDE, you&#39;ll be asked to set a password for your new Cloud9 account:</p>\n<p><img src=\"./images/activateAccount.png\" alt=\"Activate Your Account with a New Password\"></p>\n<p>Click on <strong>Activate</strong>.</p>\n<p>Congratulations! You are now the proud owner of a Cloud9 account. Now, go ahead and <a href=\"creating_new_workspace.html\">create your first project</a>. Happy coding!</p>\n\n<h2>Creating a New Workspace</h2>\n<p>There are various choices to be made when creating a new workspace in Cloud9 IDE. In this article, we&#39;ll walk you through the creation of a new workspace and describe the choices you encounter.</p>\n<p>The first step for creating a new workspace is to click on the <img src=\"./icons/workspacePlusIcon.png\" alt=\"Workspace Add Icon\"> next to <strong>MY PROJECTS</strong>  in the Workspaces tab:\n<img src=\"./images/newWorkspace.png\" alt=\"New workspace creation\"></p>\n<p>At this point, you&#39;ll encounter two choices: <strong>Create a new workspace</strong> and <strong>Clone from URL</strong>. Here&#39;s what they mean:</p>\n<h3>Create a New Workspace</h3>\n<p>After clicking on <strong>Create a new workspace</strong>, you&#39;re taken to the screen below:</p>\n<p><img src=\"./images/createNewWorkspaceOptions.png\" alt=\"Options for creating a new workspace\"></p>\n<p>Enter a workspace name. Depending on whether you have a free of premium account, you&#39;ll have several choices for the types of workspace you can create:</p>\n<ul>\n<li><strong>Git workspace</strong> allows you to run <code>git</code> commands from the console and push your changes to <a href=\"./setting_up_github_workspace.html\">a GitHub repo</a>, or <a href=\"./setting_up_bitbucket_workspace.html\">a Bitbucket git repo</a>.</li>\n<li><strong>Mercurial</strong> allows you to run <code>hg</code> commands form the console and push your changes to <a href=\"./setting_up_bitbucket_workspace.html\">a Mercurial Bitbucket repo</a></li>\n<li><strong>FTP</strong> allows you to <a href=\"./ftp_workspaces.html\">upload your files directly to an FTP server</a> you have access to</li>\n<li><strong>SSH</strong>, also called the &quot;bring your own server&quot; feature, lets you <a href=\"./ssh_workspaces.html\">log into a server you own</a> and run Cloud9 from there</li>\n</ul>\n<p>Make a choice for the type of workspace and press <strong>Create</strong>. That&#39;s it! You can now see your new workspace in the dashboard:</p>\n<p><img src=\"./images/createdWorkspace.png\" alt=\"New workspace greeting\"></p>\n<p>Now, just click <strong>Start Editing</strong> to get started!</p>\n<h3>Clone from URL</h3>\n<p>The second option for creating a new workspace is to clone one from URL. The URL would be, for example, the URL of a Github workspace such as this one: <a href=\"https://github.com/mattpardee/geekdots\">https://github.com/mattpardee/geekdots</a></p>\n<p>In fact, let&#39;s clone that workspace. When you click on <strong>Clone from URL</strong>, you&#39;re taken to this screen:<br><img src=\"./images/cloneWorkspaceOptions.png\" alt=\"Options for cloning a workspace\"></p>\n<p>Paste the following GitHub URL in the textbox labeled <strong>Source URL</strong>: <a href=\"https://github.com/fjakobs/cloud9-coffeescript-example\">https://github.com/fjakobs/cloud9-coffeescript-example</a>  </p>\n<p>If you have a premium account, you can choose who has access to your workspace. For regular users, the new workspace will be public.</p>\n<p>Now, check out the workspace. It will be created under <strong>My Workspaces</strong>. You can now start editing it!</p>\n<h3>Deleting a workspace</h3>\n<p>Now that you know how to create a workspace, you should also learn how to delete one. Look at the far right side of your dashboard:</p>\n<p><img src=\"./images/deleteWorkspace.png\" alt=\"Delete workspace screen\"></p>\n<p>Clicking on the <strong>Delete</strong> button prompts the IDE to ask for confirmation:<br><img src=\"./images/deleteConfirmation.png\" alt=\"Confirmation of workspace deletion\"></p>\n<p>This is your last chance to change your mind. Once you have typed <strong>delete</strong> in the textbox and pressed the red button, your workspace will be gone forever from Cloud9. If you are sure you want to delete your workspace, go ahead and press the red button. Of course, if your workspace is hosted elsewhere, like on another git or FTP server, it still exists in those repositories.</p>\n\n<h2>Setting up an FTP project</h2>\n<iframe width=\"480\" height=\"360\" src=\"http://www.youtube.com/embed/HehwOFg7jYc\" frameborder=\"0\" allowfullscreen></iframe>\n\n<p>In this article, we&#39;ll show you how to set up an FTP project. Before attempting to create an FTP project, please be aware that Cloud9 IDE currently support only passive FTP. Active FTP, SFTP and FTPS are <strong>not yet supported</strong>.</p>\n<p>To create an FTP project, do the following: in the <em>Projects</em> tab on the Dashboard, click on the <img src=\"./icons/workspacePlusIcon.png\" alt=\"Project Add Icon\"> next to <strong>MY PROJECTS</strong> and choose the option to <strong>Create a new project</strong> (see &quot;<a href=\"./creating_new_workspace.html\">Creating a New Project</a>&quot; if you need to review the steps to create a new project):<br><img src=\"./images/newWorkspace.png\" alt=\"New workspace creation\"></p>\n<p>In the pop-up window that appears, select <strong>FTP</strong> for the project type:</p>\n<p><img src=\"./images/FTPoptions.png\" alt=\"FTP Options\"></p>\n<p>Let&#39;s review the options available for your FTP project:</p>\n<ul>\n<li><strong>Hostname</strong>: the domain address or IP address of the machine running your FTP server.</li>\n<li><strong>Username</strong>: your username for the FTP server.</li>\n<li><strong>Password</strong>: your password for the FTP server.</li>\n<li></li>\n</ul>\n<div class=\"alert alert-block\"><h4 class=\"alert-heading\">Warning: </h4>Be careful not to put an initial path that leaves you in a location where you don&#39;t have write privileges as that could cause problems.</div>\n<p>Fill in your FTP details and click the <strong>Login Test</strong> to verify that the settings are correct. If the test succeeds, go ahead and click <strong>Create</strong> to create your FTP project. You&#39;ll then see your project in the Dashboard under My Projects:</p>\n<p><img src=\"./images/newFtpWorkspace.png\" alt=\"New FTP Project\"></p>\n<p>When your new FTP project is selected, you will see three buttons: <strong>Start Editing</strong>, <strong>FTP settings</strong>, and <strong>Delete</strong> (on the far right). <strong>FTP settings</strong> gives you access to the settings you just filled in, as well as the login test. This is useful to use in case your login credentials have changed.</p>\n<p>To get started with your FTP project, click on the <strong>Start Editing</strong> button. You&#39;ll be taken to the editor. Under Project Files, you should see the files from the FTP server in the directory you selected (either your home/default folder or the location indicated by the Initial Path, if you set it). The editor for FTP projects works the same as in other projects: you can create and edit your files in the usual way. The main difference is the <strong>FTP log</strong> at the bottom of the page (where the console is usually located for other non-FTP projects).</p>\n<p>The FTP log displays output related to the interaction with the FTP server. The screenshot below, for example, shows what happens when we create a new file called <em>TestFile.txt</em>. The file is created in the FTP server and when I write to it, the contents are transferred.</p>\n<p><img src=\"./images/FTPlog.png\" alt=\"Demonstrating new files in the FTP\"></p>\n<div class=\"alert alert-success\"><h4 class=\"alert-heading\">Note: </h4>In an FTP project, all files are stored in your FTP server; Cloud9 only stores the FTP settings. Please keep this in mind. Cloud9 IDE does not keep any copies of your files, so make sure you back them up properly. Any changes you make to these files in Cloud9 are automatically reflected on the live web server.</div>\n\n<h2>Running and Debugging Your Code</h2>\n<p>Cloud9 IDE provides several ways to run and debug your code. We&#39;ll explore each of them in this article.</p>\n<h3>Running Code</h3>\n<p>Running your code in Cloud9 is really easy. First, open the file you want to run. Usually, this file is going to be the main entry point to your app; for example, if you&#39;re creating a server, you&#39;d want to run the file that actually instantiates that server.</p>\n<p>Next, click on the <strong>Run</strong> button in <a href=\"./project_bar.html\">the project bar</a>. You&#39;ll notice immediately that your active file is already available to run. Just double-click on the file, and you&#39;ll launch your app.</p>\n<p>At the bottom of the run panel, you&#39;ll notice a few more options you can set:</p>\n<ul>\n<li><strong>Name</strong>: the name of your run scenario</li>\n<li><strong>File Path</strong>: the location of your running file in your project</li>\n<li><strong>Runtime</strong>: defines the default runtime for your Node.js code. &quot;Auto&quot; is based on whatever is in the <em>package.json</em> file, while &quot;Default&quot; reverts to Node 0.4.x.</li>\n<li></li>\n</ul>\n<p>You can also save your run scenarios. Just click on the <strong>add</strong> button at the top of the panel. When you&#39;re ready to run a scenario, click on its name in the list. Finally, to remove a run scenario, click on its name in the run panel list, and then click on the <strong>remove</strong> button. </p>\n<p>When you&#39;re ready to stop your app, click on the <img src=\"./icons/stop_button.png\" alt=\"Icon of the Stop Button\"> button in the menu bar.</p>\n<h4>Console Output</h4>\n<p>Every time you run a project, the console expands to reveal output from your program. If you&#39;re launching a server, Cloud9 provides you with a URL to access the project:</p>\n<p>Otherwise, any statements sent by your program&#39;s print statements (like <code>console.log()</code>) are also shown here.</p>\n<h3>Debugging Your Code</h3>\n<p>Setting up a project to debug is done in very much the same way as running your code. The only difference is that you must click on the run settings icon <img src=\"./icons/runSettingsIcon.png\" alt=\"Run Settings Icon: A Gear with an Arrow\"> and select &quot;Run in debug mode.&quot;</p>\n<p>Initially, the only difference this will make is the expansion of <a href=\"./toolbar.html\">the toolbar</a> to the right of the editor:<br><img src=\"./images/tool_bar.png\" alt=\"The toolbar used for debugging\"></p>\n<p>You&#39;ll have access to the following capabilities:</p>\n<ul>\n<li></li>\n</ul>\n<p>[<em> Debugging Navigation: this is a set of tools you can use to move around your code while debugging. You can step into, over, and out of your code, or simply press play to run the process until the next breakpoint.]{: #debugNavigation}\n<img src=\"./icons/debug_navigation.png\" alt=\"Debugging navigation tools\">\n[</em> Callstack <img src=\"./icons/callStackIcon.png\" alt=\"Icon for the callstack\">: this is a structured list of information about the sequences of your code--basically, which functions are calling what, and where you are in the current process. It also stores local variables and function arguments, if present. You can use this feature to check how your code is running:  ]{: #callStack}<br><img src=\"./images/callStack.png\" alt=\"Callstack menu window\"></p>\n<p><a href=\"./icons/interactiveIcon.png\">* Interactive Mode ![Icon for interactive mode</a>: lets you evaluate a piece of code, such as expressions or the values and properties of variables. The text field allows you to type any code you want, in case you discover a way to fix you problem:  ]{: #interactive}\n<img src=\"./images/interactiveMenu.png\" alt=\"Interactive mode window\"></p>\n<p><a href=\"./icons/variablesIcon.png\">* Variable Inspection ![Icon for variable inspection</a>: this shows all the related variables (including functions) that are present in the current context:  ]{: #inspection}\n<img src=\"./images/variablesMenu.png\" alt=\"Variable inspection window\"><br>While debugging, you also have the power of the live inspector. While hovering over a piece of code in the editor, you&#39;ll instantly get some floating text that describes the values of that variable.</p>\n<p><a href=\"./icons/breakpointsIcon.png\">* Breakpoint List ![Icon for breakpoint list</a>: this section lists all the breakpoints in your project:  ]{: #breakpointList}\n<img src=\"./images/breakpointsMenu.png\" alt=\"Breakpoint list window\"></p>\n\n<h2>Setting Up a Git Project (on BitBucket)</h2>\n<p>In this article, we&#39;ll explain the steps needed to push a Cloud9 IDE project to Bitbucket. For this article, we&#39;re assuming that you have created a git project in Cloud9. Let&#39;s see how you can push this project to Bitbucket.</p>\n<p>First, if you haven&#39;t done so already, create a Bitbucket account. Then, follow these steps:</p>\n<ol>\n<li><p>Go to your Cloud9 dashboard. Click on <strong>Your Account</strong> and, under <strong>Account Settings</strong>, click on <strong>Show your SSH key</strong> and copy the key.</p>\n<pre><code>                                                                                                                 * </code></pre>\n<p><img src=\"./images/sshKey.png\" alt=\"Viewing your SSH key\"></p>\n</li>\n<li><p>In BitBucket, go to <strong>Account Settings</strong>, and then click on <strong><a href=\"https://bitbucket.org/account/#ssh-keys\">SSH Keys</a></strong>. \nPaste the Cloud9 SSH key into the textbox. Then, click <strong>Add key</strong>.</p>\n</li>\n<li><p><img src=\"./images/cloneBitbucket.png\" alt=\"Cloning from Bitbucket\"></p>\n</li>\n<li><p>Go to your Cloud9 project. If you created it as a git project, git is already setup. If you haven&#39;t already, commit any changes using the console:</p>\n<p> git add .\n git commit -a -m &quot;My first commit&quot;</p>\n</li>\n<li><p>Add a new remote repository from the Cloud9 console; for instance:</p>\n<p> git remote add origin git@bitbucket.org:username/repository_name.git</p>\n</li>\n<li><p>Finally, you can push to this repository:</p>\n<p> git push origin master</p>\n</li>\n</ol>\n<p>Your changes will appear on Bitbucket.</p>\n\n<h2>Setting Up a GitHub Project</h2>\n<p>GitHub is a code hosting service which offers you a lot of features to manage your public and private git repositories. For more information about GitHub and how to use it, visit <a href=\"https://github.com/\">www.github.com</a>.</p>\n<p>We have integrated GitHub to enable you to easily work on your public and private Git repositories. The following article explains how you can activate your GitHub account in Cloud9 IDE.</p>\n<h3>GitHub Activation</h3>\n<p>You can manage your add-on services from your user profile that you can find in [./dashboard.html](the dashboard). When you have just signed in, click <strong>Your Account</strong> on the top of the left-side panel. Here, you can change the settings of your account. At the bottom, you&#39;ll see a list of add-on services that are integrated into Cloud9 IDE. Click <strong>activate</strong> on the GitHub button:</p>\n<p><img src=\"./images/addonServices.png\" alt=\"Add-on Services Screenshot\"></p>\n<p>A new window will pop-up on your screen. This window asks you to give authorization permission for the Cloud9 IDE application to interact in various ways with GitHub:</p>\n<p><img src=\"./images/githubAuthorization.png\" alt=\"GitHub Permissions Window\"></p>\n<p>To finalize the activation, click on <strong>Allow</strong>. Next, you&#39;re redirected to your account page, where you&#39;ll notice that your GitHub account is activated. You can deactivate GitHub by simply clicking deactivate, which may be useful when you want to link your GitHub account to another Cloud9 account.</p>\n<p>Now that you have activated GitHub, you can start to create and manage git projects!</p>\n<h3>Managing Git Projects</h3>\n<p>There are several ways to manage GitHub projects in Cloud9 IDE:</p>\n<ul>\n<li>By creating a new git project and pushing it to GitHub</li>\n<li>By cloning a GitHub project from a URL</li>\n<li>By bringing in a GitHub project manually</li>\n</ul>\n<h4>Creating a New Git Project</h4>\n<p>New projects are created from the dashboard. In the left-side panel, click on the <img src=\"./icons/workspacePlusIcon.png\" alt=\"Project Add Icon\"> to add a new project:</p>\n<p><img src=\"./images/newWorkspace.png\" alt=\"New project menu\"></p>\n<p>A new window will pop-up in which you can change your settings to your preferences:</p>\n<ul>\n<li>Fill in your preferred project name in the text field</li>\n<li>Choose who will have access to the project (a feature for Premium customers)</li>\n<li>Select your project type (git, mercurial, or FTP)</li>\n<li>Choose a development server (a feature for Premium customers)</li>\n</ul>\n<p><img src=\"./images/createNewWorkspaceOptions.png\" alt=\"New Project Options\"></p>\n<p>Select git as your project type. After you click <strong>CREATE</strong>, the project is listed in your dashboard. Select the project to see its Project Profile, where you can start editing: <img src=\"./icons/startEditing.png\" alt=\"Start editing button\"></p>\n<p>There are a couple of things you should do first, before you can use all of git&#39;s power. First, you&#39;ll want to add a remote to the project. From the Cloud9 IDE command line, you can execute the following commands: </p>\n<pre><code> git remote add [remote name] [remote url]</code></pre>\n<p><code>remote url</code> is the location of the project on GitHub; for example <code>&#39;git@github.com:/ajaxorg/node_chat&#39;</code>. You&#39;ll have to create a GitHub project first in order to generate this URL. Adding a remote URL lets you freely push and pull your project.</p>\n<p>Next, create a few new files inside your project. By default, you should already have a <em>README.md</em>. You can add these files to git with the following command:</p>\n<pre><code>git add [file1, file2, file3, ...]</code></pre>\n<p>Finally, create a commit that you can push to your remote:</p>\n<pre><code>git commit -m &#39;added new files&#39;</code></pre>\n<p>Don&#39;t forget to push this commit out to GitHub: </p>\n<pre><code>git push [remote name] master</code></pre>\n<p>Ta-da! Your project is developed on Cloud9, and stored in GitHub.</p>\n<h4>Cloning Projects from a URL</h4>\n<p>You can also create a project in Cloud9 IDE by cloning it from a GitHub URL. Once again, click on the <img src=\"./icons/workspacePlusIcon.png\" alt=\"Project Add Icon\">, and select <strong>Clone from URL</strong>. A new window pops up asks you:</p>\n<ul>\n<li>to enter a Source URL</li>\n<li>to choose who will have access to the project (Premium feature)  </li>\n<li>to choose a development server (Premium feature)  </li>\n</ul>\n<p><img src=\"./images/cloneWorkspaceOptions.png\" alt=\"Clone Project Options\"></p>\n<p>You can find an examples of a GitHub URL on any of their repo description pages:</p>\n<p><img src=\"./images/githubProjectURL.png\" alt=\"GitHub Repo Description\"></p>\n<p>Paste the URL in the source field and click <strong>CHECKOUT</strong>. In the left-side panel, you&#39;ll see the project and its status turn into &quot;Cloning in Progress&quot;. When this process is completed you can open the project and start editing it, just like any other project.</p>\n<h4>Clone Projects Already On GitHub</h4>\n<p>When you provide Cloud9 IDE with your GitHub credentials, it provides a list of projects you haven&#39;t yet imported into the editor:</p>\n<p><img src=\"./images/githubPendingWorkspaces.png\" alt=\"GitHub Pending Projects\"></p>\n<p>From this list, clicking on a project and selecting <strong>CLONE TO EDIT</strong> brings the repo into the IDE, just as if you cloned it from a URL.</p>\n\n<h2>Create a CoffeeScript Project</h2>\n<p>For this tutorial, we&#39;ll show you how to create and run a <a href=\"http://coffeescript.org/\">CoffeeScript</a> project, entirely within the Cloud9 IDE. To run any coffeescript project, you&#39;ll need to first make sure to install the <code>coffeescript</code> module via the Node Package Manager (npm). We&#39;re going to walk you through how to do that with a sample project.</p>\n<p>First, create a new project. Then, in the console, enter the following command:</p>\n<pre><code>git clone git://github.com/fjakobs/cloud9-coffeescript-example.git</code></pre>\n<p>This is a sample CoffeeScript application written by one of our developers. After cloning the project, you&#39;ll find three different files in the tree: <em>server.js</em>, <em>app.coffee</em>, and <em>README.md</em>.</p>\n<p>The <em>README.md</em> file contains instructions to install coffee-script using npm. We&#39;ve integrated Node Package Manager into Cloud9 IDE to enable users to install Node programs. Thus, from the Cloud9 IDE command line, type the following command to install the Coffeescript module:</p>\n<pre><code>npm install coffee-script</code></pre>\n<p>Next, let&#39;s have a look at the <em>server.js</em> file. The first line is the <code>require()</code> function, which is used to load the coffee-script module that you have just installed. On the second line, we declare the CoffeeScript file that contains your application. In the last line, we specify the port the server is listening to. When projects run within Cloud9 IDE, you must retrieve the port information using <code>process.env.PORT</code>.</p>\n<p>Now, let&#39;s look at what the CoffeeScript file does. It creates an HTTP server with a function that is called for each request. In the callback function, you create a response with a status code of <code>200</code> (indicating that the request was fulfilled successfully) and the message &quot;Hello World&quot;. You use <code>module.exports</code> to enable the <em>server.js</em> file to use the code in the CoffeeScript file:</p>\n<pre><code>http = require &quot;http&quot;\n\nmodule.exports = http.createServer((req, res) -&gt;\n    res.writeHead 200, &#39;Content-Type&#39;: &#39;text/plain&#39;\n    res.end &#39;Hello World\\n&#39;</code></pre>\n<p>Next, run the <em>server.js</em> file and open the URL indicated in the console:</p>\n<p><img src=\"./images/consoleServerMessage.png\" alt=\"Messages in the console about the server\"></p>\n<p>The result is:</p>\n<p><img src=\"./images/coffeescriptServer.png\" alt=\"The server running in a browser\"></p>\n<p>To stop your application, go back to the editor and click on the <img src=\"./icons/stop_button.png\" alt=\"Icon of the Stop Button\"> button in the Menu Bar.</p>\n\n<h2>Editing Wordpress Websites</h2>\n<iframe width=\"480\" height=\"360\" src=\"http://www.youtube.com/embed/3vZIKzALxyU\" frameborder=\"0\" allowfullscreen></iframe>\n\n<p>Did you know that you can use Cloud9 IDE to work on your Wordpress website? It&#39;s true, and incredibly easy. Obviously, you can&#39;t edit your posts on Wordpress using Cloud9, since they are stored in a database on your server. But you can edit pretty much every other aspect of your site.</p>\n<p>To start, you&#39;ll need to <a href=\"./ftp_workspaces.html\">create a new FTP project</a>. After that, you can pretty much just enter your <em>wp-content</em> folder, find the theme you&#39;re using on your website, and start editing its style.</p>\n<p>Thanks to <a href=\"./editor.html#previewButton\">the preview button</a> in the menu bar, you can also witness your changes as they happen, before commiting them to your server.</p>\n\n<h2>Writing a Node.js Hello World program</h2>\n<p>In this article, we&#39;ll walk you through the creation of a simple Hello World program. If you followed our last two lessons, you already have a Cloud9 IDE account and you know how to create a project. To get started with this lesson, you&#39;ll need to first create a (GitHub or Mercurial) project. If you need a refresher on how to do this, please refer to <a href=\"creating_new_workspace.html\">Creating a New Workspace</a>.</p>\n<h4>A Simple Node.js HTTP Server</h4>\n<p>Once you have created your project, click on the <strong>Start Editing</strong> button to go to the Cloud9 IDE editor. In the editor, create a new file called <code>server.js</code>. Type the following code in the file:</p>\n<pre><code>var http = require(&#39;http&#39;);\nhttp.createServer(function (req, res) {\n    res.writeHead(200, {&#39;Content-Type&#39;: &#39;text/plain&#39;});\n    res.end(&#39;Hello World\\n&#39;);\n}).listen(process.env.PORT);</code></pre>\n<p>What you just wrote is a Node.js HTTP server that returns a simple &#39;Hello World&#39; page for every request. In short, you are creating an HTTP server with a callback function that is called for each request. In the callback function, you create a response with a status code of <code>200</code> (indicating that the request was fulfilled successfully) and the message &quot;Hello World&quot;. Finally, you specify which port the server listens to. When Node.js projects run within Cloud9 IDE, you can retrieve the port information with the <code>process.env.PORT</code> variable.</p>\n<h4>Running your program</h4>\n<p>With Cloud9 IDE, you can run your Node.js applications in a test environment and see the results of your program. To run your &quot;Hello, World&quot; application, click on the <strong>Run</strong> button in the project bar. All you need to do now is double-click the name of your new file to get it running:<br><img src=\"./images/newRunConfiguration.png\" alt=\"A new run configuration pop-up\"></p>\n<p>Your application will be deployed to one of our servers, and you will immediately see some output in the console similar to the one below:<br><img src=\"./images/RunOutput.png\" alt=\"Console run output\"></p>\n<p>To see your application in action, click on the link created for your project. You should see your &quot;Hello World&quot; application open up in a new browser tab:<br><img src=\"./images/helloWorld.png\" alt=\"Node.js Hello World in the Browser\">.</p>\n<p>To stop your application, go back to the editor and click on the <img src=\"./icons/stop_button.png\" alt=\"Icon of the Stop Button\"> button in the menu bar.</p>\n<p>For more information on running and debugging your projects, check out <a href=\"./running_and_debugging_your_code.html\">this article</a>.</p>\n\nRunning tests on out\nFinished running tests on out\nFinished ./manifest.json generation\n"]],"start1":0,"start2":0,"length1":0,"length2":70088}]],"length":70088}
{"contributors":[],"silentsave":true,"ts":1342572626924,"patch":[[{"diffs":[[0,"out\n"],[-1,"Finished running tests on out\nFinished ./manifest.json generation\n"]],"start1":70018,"start2":70018,"length1":70,"length2":4}]],"length":70022,"saved":false}
